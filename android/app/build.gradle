def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("app/keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}else{
    keystoreProperties.load(new FileInputStream(rootProject.file("app/keystore-default.properties")))
}

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.vnapnic.flutter_architecture"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        resValue "string", "app_name", "Flutter Architecture"
    }

    signingConfigs {
        debug {
            keyAlias keystoreProperties['debugAlias']
            keyPassword keystoreProperties['debugPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
        release {
            keyAlias keystoreProperties['releaseAlias']
            keyPassword keystoreProperties['releasePassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "default"
    productFlavors {
        development {
            applicationIdSuffix ".dev"
            versionNameSuffix = "-dev"
            resValue "string", "app_name", "FArchitecture Dev"
        }
        staging {
            applicationIdSuffix ".staging"
            versionNameSuffix = "-staging"
            resValue "string", "app_name", "FArchitecture Stg"
        }
        preprod {
            applicationIdSuffix ".preprod"
            versionNameSuffix = "-preprod"
            resValue "string", "app_name", "FArchitecture pred"
        }

        production {
            resValue "string", "app_name", "FArchitecture"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
